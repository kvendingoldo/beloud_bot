# -*- coding: utf-8 -*-

import prettytable as pt
import telebot
import sys
import logging
import time

from utils import config as cfg_utils
from db import utils as db_utils
from models import state
from constants import common

from telebot.types import ReplyKeyboardRemove

sys.path.append('../resources/')
config = cfg_utils.load("../resources/config.yml")

bot = telebot.TeleBot(config["telegram"]["token"])
telebot.logger.setLevel(logging.INFO)

state_repo = db_utils.get_repos(config)

text_messages = {
    'start': u'{name}, –ø—Ä–∏–≤–µ—Ç! üéâ –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é ‚ú®',

    'state_1': '–û—Ü–µ–Ω–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ 10—Ç–∏ –±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ',
    'state_2': '–í—Ä–µ–º—è –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è! –¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–æ–º. –î–∞–Ω–Ω—ã–µ —è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é üôÖ‚Äç (—É –º–µ–Ω—è –Ω–∞ —ç—Ç–æ –±–∞–Ω–∞–ª—å–Ω–æ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ üôÇ)',
    'state_3': '–û—á–µ–Ω—å –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã—Å–∫–∞–∑–∞–ª—Å—è! –ü–æ–ª–µ–≥—á–∞–ª–æ? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ —Ä–∞–∑',
    'state_4': '–ö—Ä—É—Ç–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∞–∫—Ç–∏–∫—É, {name}! –ù–µ –∑–∞–±—ã–≤–∞–π –µ–µ –¥–µ–ª–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –≤–µ–¥—å —è –¥–ª—è —ç—Ç–æ–≥–æ –∏ —Å—É—â–µ—Å—Ç–≤—É—é',

    'show_history': '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è: \n',

    'help': '–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start –∏ —Å–∫–∞–∂–∏ –≤—Å–µ, —á—Ç–æ —É —Ç–µ–±—è –¥–µ—Ä–∂–∞–ª–æ—Å—å –≤–Ω—É—Ç—Ä–∏. üí• –î–æ –∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –≤—ã—Å–∫–∞–∂–µ—à—å—Å—è (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫) —è —Å–ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–æ —Ç–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è –ø–æ –¥–µ—Å—è—Ç–∏–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ. –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è –Ω–µ —Å–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ üôÖ‚Äç, —É –º–µ–Ω—è –±–∞–Ω–∞–ª—å–Ω–æ –Ω–µ—Ç –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã –∏—Ö —Ö—Ä–∞–Ω–∏—Ç—å :) \n\n–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: \n/start - –Ω–∞—á–∞—Ç—å –≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å—Å—è \n/help - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É',

    'wrong_msg': '–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —á–µ—Ä–µ–∑ /help –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≥–æ —á–µ—Ä–µ–∑ /start'
}


@bot.message_handler(commands=['help'])
def handler_help(message):
    try:
        bot.send_message(
            message.from_user.id,
            text_messages['help'],
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as ex:
        logging.error(ex)


@bot.message_handler(commands=['start'])
def handler_start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é', '–ø–æ–º–æ—â—å')

    try:
        msg = bot.send_message(
            message.from_user.id,
            text_messages['start'].format(name=message.from_user.first_name),
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, handler_l1)
    except Exception as ex:
        logging.error(ex)


@bot.message_handler(content_types=['text'])
def handler_l1(message):
    if message.text == '–≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è':
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£')
        markup.row('6Ô∏è‚É£', '7Ô∏è‚É£Ô∏è', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü')

        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages['state_1'],
                reply_markup=markup
            )
            bot.register_next_step_handler(msg, handler_state_1)
        except Exception as ex:
            logging.error(ex)

    elif message.text == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é':
        try:
            states = state_repo.list(spec={"uid": message.from_user.id})
            table = pt.PrettyTable(['–¥–∞—Ç–∞', '–æ—Ü–µ–Ω–∫–∞ –¥–æ', '–æ—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç'])
            for state in states:
                s_bfr = state.r_bfr
                s_afr = state.r_afr

                if state.r_afr > state.r_bfr:
                    result = "üôÇ"
                    s_afr = f"{s_afr}"
                elif state.r_afr >= state.r_bfr:
                    result = "üòê"
                else:
                    result = "üòî"
                    s_bfr = f"{s_bfr}"

                table.add_row([
                    state.tmst_created,
                    s_bfr,
                    s_afr,
                    result
                ])
            try:
                bot.send_message(
                    message.from_user.id,
                    text_messages["show_history"] + f'\n\n```{table}```',
                    parse_mode='MarkdownV2',
                    reply_markup=ReplyKeyboardRemove()
                )
            except Exception as ex:
                logging.error(ex)
        except Exception as ex:
            logging.error(ex)
    elif message.text == '–ø–æ–º–æ—â—å':
        try:
            msg = bot.send_message(
                message.from_user.id,
                text_messages["help"],
                reply_markup=ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, handler_start)
        except Exception as ex:
            logging.error(ex)

    else:
        bot.send_message(
            message.from_user.id,
            text_messages["wrong_msg"],
            reply_markup=ReplyKeyboardRemove()
        )


@bot.message_handler(content_types=['text'])
def handler_state_1(message):
    try:
        state_repo.add(state.State(
            uid=message.from_user.id,
            username=message.from_user.username,
            r_bfr=common.emoji2int[message.text]
        ))
    except Exception as ex:
        logging.error(ex)

    try:
        msg = bot.send_message(
            message.from_user.id,
            text_messages["state_2"],
            reply_markup=ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, handler_state_2)
    except Exception as ex:
        logging.error(ex)


@bot.message_handler(content_types=['text', 'voice', 'video', 'video_note'])
def handler_state_2(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£')
    markup.row('6Ô∏è‚É£', '7Ô∏è‚É£Ô∏è', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü')

    try:
        msg = bot.send_message(
            message.from_user.id,
            text_messages['state_3'].format(name=message.from_user.first_name),
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, handler_state_3)
    except Exception as ex:
        logging.error(ex)


@bot.message_handler(content_types=['text'])
def handler_state_3(message):
    try:
        n_state = state_repo.get_latest_by_uid(message.from_user.id)
        n_state.r_afr = common.emoji2int[message.text]
        state_repo.update(n_state)
    except Exception as ex:
        logging.error(ex)

    try:
        bot.send_message(
            message.from_user.id,
            text_messages['state_4'].format(name=message.from_user.first_name),
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as ex:
        logging.error(ex)


def run():
    while True:
        try:
            bot.polling(non_stop=True, interval=0, timeout=10)
        except Exception as ex:
            logging.info("[telegram] Failed: %s" % ex)
            time.sleep(3)
